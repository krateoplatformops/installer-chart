{{- if and ( .Values.krateoplatformops.vcluster.enabled) (not .Values.krateoplatformops.custom.enabled )  }}
apiVersion: krateo.io/v1alpha1
kind: KrateoPlatformOps
metadata:
  annotations:
    "krateo.io/connector-verbose": "true"
  name: vcluster
  namespace: {{ .Release.Namespace }}
spec:
  steps:
    - id: install-vcluster
      type: chart
      with:
        name: vcluster-k8s
        version: 0.19.5
        repository: https://charts.loft.sh
        wait: true
        waitTimeout: 5m
        set:
          {{- if .Values.krateoplatformops.vcluster.defaultImageRegistry }}
          - name: defaultImageRegistry
            value: {{ .Values.krateoplatformops.vcluster.defaultImageRegistry}}
          {{- end }}
          {{- if .Values.krateoplatformops.vcluster.storage.className }}
          - name: syncer.storage.className
            value: {{ .Values.krateoplatformops.vcluster.storage.className }}
          - name: etcd.storage.className
            value: {{ .Values.krateoplatformops.vcluster.storage.className }}
          {{- end }}
          {{- if eq .Values.krateoplatformops.service.type "NodePort" }}
          - name: service.type
            value: NodePort
          - name: service.httpsNodePort
            value: "31443"
          {{- else if eq .Values.krateoplatformops.service.type "LoadBalancer" }}
          - name: service.type
            value: LoadBalancer
          {{- else if .Values.krateoplatformops.ingress.enabled }}
          - name: service.type
            value: ClusterIP
          - name: ingress.host
            value: {{ .Values.krateoplatformops.ingress.vcluster.host }}
          - name: ingress.ingressClassName
            value: {{ .Values.krateoplatformops.ingress.vcluster.ingressClassName }}
          - name: ingress.pathType
            value: {{ .Values.krateoplatformops.ingress.vcluster.pathType }}
          {{- range $key, $value := .Values.krateoplatformops.ingress.vcluster.annotations }}
          - name: ingress.annotations.{{ $key | replace "." "\\." }}
            value: {{ $value | quote }}
            asString: true
          {{- end }}
          - name: ingress.enabled
            value: "true"
          - name: sync.ingresses.enabled
            value: "true"
          {{- end }}
          {{- if .Values.krateoplatformops.vcluster.openshift.enable }}
          - name: openshift.enable
            value: {{ .Values.krateoplatformops.vcluster.openshift.enable | quote }}
            # asString: true
          {{- end }}
          {{- if .Values.krateoplatformops.vcluster.securityContext.allowPrivilegeEscalation }}
          - name: syncer.securityContext.allowPrivilegeEscalation
            value: {{ .Values.krateoplatformops.vcluster.securityContext.allowPrivilegeEscalation | quote }}
            # asString: true
          {{- end }}
          {{- if .Values.krateoplatformops.vcluster.securityContext.runAsUser }}
          - name: syncer.podSecurityContext.runAsUser
            value: {{ .Values.krateoplatformops.vcluster.securityContext.runAsUser | quote }}
            # asString: true
          {{- else }}
          - name: syncer.podSecurityContext.runAsUser
            value: "null"
          {{- end }}
          {{- if .Values.krateoplatformops.vcluster.securityContext.runAsGroup }}
          - name: syncer.podSecurityContext.runAsGroup
            value: {{ .Values.krateoplatformops.vcluster.securityContext.runAsGroup | quote }}
          {{- else }}
          - name: syncer.podSecurityContext.runAsGroup
            value: "null"
          {{- end }}
          {{- if .Values.krateoplatformops.vcluster.sync.persistentvolumes.enabled }}
          - name: sync.persistentvolumes.enabled
            value: "true"
            asString: true
          {{- end }}
          {{- if .Values.krateoplatformops.vcluster.sync.storageclasses.enabled }}
          - name: sync.storageclasses.enabled
            value: "true"
            asString: true
          {{- end }}
          - name: init.manifests
            value: |-
              apiVersion: v1
              kind: Namespace
              metadata:
                name: {{ .Release.Namespace }}
          - name: init.helm[0].chart.name
            value: installer
          - name: init.helm[0].chart.repo
            value: https://charts.krateo.io
          - name: init.helm[0].chart.version
            value: {{ .Chart.Version }}
          - name: init.helm[0].release.name
            value: installer
          - name: init.helm[0].release.namespace
            value: {{ .Release.Namespace }}
          - name: init.helm[0].values
            value: |-
              {{- if eq .Values.env.INSTALLER_DEBUG "true" }}
              env:
                INSTALLER_DEBUG: "true"
              {{- else }}
              env:
                INSTALLER_DEBUG: "false"
              {{- end }}
              krateoplatformops:
                vcluster:
                  enabled: false
                {{- if .Values.krateoplatformops.init.enabled }}
                init:
                  enabled: true
                {{- else }}
                init:
                  enabled: false
                {{- end }}
                {{- if and (eq .Values.krateoplatformops.service.type "NodePort") .Values.krateoplatformops.service.externalIpAvailable }}
                service:
                  type: NodePort
                  externalIpAvailable: true
                {{- else if and (eq .Values.krateoplatformops.service.type "NodePort") (not .Values.krateoplatformops.service.externalIpAvailable) }}
                service:
                  type: NodePort
                  externalIpAvailable: false
                {{- else if and (eq .Values.krateoplatformops.service.type "LoadBalancer") .Values.krateoplatformops.service.externalIpAvailable }}
                service:
                  type: LoadBalancer
                  externalIpAvailable: true
                {{- else if and (eq .Values.krateoplatformops.service.type "LoadBalancer") (not .Values.krateoplatformops.service.externalIpAvailable) }}
                service:
                  type: LoadBalancer
                  externalIpAvailable: false
                {{- else }}
                service:
                  type: ClusterIP
                  externalIpAvailable: false
                {{- end }}
                {{- if .Values.krateoplatformops.ingress.enabled }}
                {{- with .Values.krateoplatformops.ingress }}
                ingress:
                  {{- toYaml . | nindent 18 }}
                {{- end }}
                {{- end }}
                {{- with .Values.krateoplatformops.frontend }}
                frontend:
                  {{- toYaml . | nindent 18 }}
                {{- end }}
                {{- with .Values.krateoplatformops.bff }}
                bff:
                  {{- toYaml . | nindent 18 }}
                {{- end }}
                {{- with .Values.krateoplatformops.backend }}
                backend:
                  {{- toYaml . | nindent 18 }}
                {{- end }}
                {{- with .Values.krateoplatformops.authn }}
                authn:
                  {{- toYaml . | nindent 18 }}
                {{- end }}
                {{- with index .Values.krateoplatformops "core-provider" }}
                core-provider:
                  {{- toYaml . | nindent 18 }}
                {{- end }}
                {{- with index .Values.krateoplatformops "patch-provider" }}
                patch-provider:
                  {{- toYaml . | nindent 18 }}
                {{- end }}
                {{- with .Values.krateoplatformops.eventrouter }}
                eventrouter:
                  {{- toYaml . | nindent 18 }}
                {{- end }}

    {{ if and (eq .Values.krateoplatformops.service.type "NodePort") .Values.krateoplatformops.service.externalIpAvailable }}
    - id: extract-vcluster-nodeport-port
      type: var
      with:
        name: KUBECONFIG_KUBERNETES_PORT
        valueFrom:
          apiVersion: v1
          kind: Service
          metadata:
            name: vcluster-k8s
          selector: .spec.ports[0].nodePort

    # to implement: $(kubectl get nodes --namespace krateo-system -o jsonpath="{.items[0].status.addresses[0].address}")
    - id: extract-vcluster-nodeport-ip
      type: var
      with:
        name: KUBECONFIG_KUBERNETES_IP
        valueFrom:
          apiVersion: v1
          kind: Service
          metadata:
            name: vcluster-k8s
          selector: .spec.ports[0].nodePort

    {{ else if and (eq .Values.krateoplatformops.service.type "NodePort") (not .Values.krateoplatformops.service.externalIpAvailable) }}
    - id: extract-vcluster-nodeport-port
      type: var
      with:
        name: KUBECONFIG_KUBERNETES_PORT
        valueFrom:
          apiVersion: v1
          kind: Service
          metadata:
            name: vcluster-k8s
          selector: .spec.ports[0].nodePort

    {{ else if eq .Values.krateoplatformops.service.type "LoadBalancer" }}
    - id: extract-vcluster-lb-ip
      type: var
      with:
        name: KUBECONFIG_KUBERNETES_IP
        valueFrom:
          apiVersion: v1
          kind: Service
          metadata:
            name: vcluster-k8s-lb
          selector: .status.loadBalancer.ingress[0].ip

    - id: extract-vcluster-lb-port
      type: var
      with:
        name: KUBECONFIG_KUBERNETES_PORT
        valueFrom:
          apiVersion: v1
          kind: Service
          metadata:
            name: vcluster-k8s-lb
          selector: .spec.ports[0].port
    {{ else if and (eq .Values.krateoplatformops.service.type "ClusterIP") ( .Values.krateoplatformops.ingress.enabled) }}
    - id: extract-vcluster-host
      type: var
      with:
        name: KUBECONFIG_KUBERNETES_HOSTNAME
        valueFrom:
          apiVersion: networking.k8s.io/v1
          kind: Ingress
          metadata:
            name: vcluster-k8s
          selector: .spec.rules[0].host
    {{ end }}

    - id: update-vcluster
      type: chart
      with:
        name: vcluster-k8s
        version: 0.19.5
        repository: https://charts.loft.sh
        wait: true
        waitTimeout: 5m
        set:
          {{- if .Values.krateoplatformops.vcluster.defaultImageRegistry }}
          - name: defaultImageRegistry
            value: {{ .Values.krateoplatformops.vcluster.defaultImageRegistry}}
          {{- end }}
          {{- if .Values.krateoplatformops.vcluster.storage.className }}
          - name: syncer.storage.className
            value: {{ .Values.krateoplatformops.vcluster.storage.className }}
          - name: etcd.storage.className
            value: {{ .Values.krateoplatformops.vcluster.storage.className }}
          {{- end }}
          {{- if eq .Values.krateoplatformops.service.type "NodePort" }}
          - name: service.type
            value: NodePort
          - name: service.nodePort
            value: "30090"
          {{- else if eq .Values.krateoplatformops.service.type "LoadBalancer" }}
          - name: service.type
            value: LoadBalancer
          {{- else if .Values.krateoplatformops.ingress.enabled }}
          - name: service.type
            value: ClusterIP
          - name: ingress.host
            value: {{ .Values.krateoplatformops.ingress.vcluster.host }}
          - name: ingress.ingressClassName
            value: {{ .Values.krateoplatformops.ingress.vcluster.ingressClassName }}
          - name: ingress.pathType
            value: {{ .Values.krateoplatformops.ingress.vcluster.pathType }}
          {{- range $key, $value := .Values.krateoplatformops.ingress.vcluster.annotations }}
          - name: ingress.annotations.{{ $key | replace "." "\\." }}
            value: {{ $value | quote }}
            asString: true
          {{- end }}
          - name: ingress.enabled
            value: "true"
          - name: sync.ingresses.enabled
            value: "true"
          {{- end }}
          {{- if .Values.krateoplatformops.vcluster.openshift.enable }}
          - name: openshift.enable
            value: {{ .Values.krateoplatformops.vcluster.openshift.enable | quote }}
            # asString: true
          {{- end }}
          {{- if .Values.krateoplatformops.vcluster.securityContext.allowPrivilegeEscalation }}
          - name: syncer.securityContext.allowPrivilegeEscalation
            value: {{ .Values.krateoplatformops.vcluster.securityContext.allowPrivilegeEscalation | quote }}
            # asString: true
          {{- end }}
          {{- if .Values.krateoplatformops.vcluster.securityContext.runAsUser }}
          - name: syncer.podSecurityContext.runAsUser
            value: {{ .Values.krateoplatformops.vcluster.securityContext.runAsUser | quote }}
            # asString: true
          {{- else }}
          - name: syncer.podSecurityContext.runAsUser
            value: "null"
          {{- end }}
          {{- if .Values.krateoplatformops.vcluster.securityContext.runAsGroup }}
          - name: syncer.podSecurityContext.runAsGroup
            value: {{ .Values.krateoplatformops.vcluster.securityContext.runAsGroup | quote }}
          {{- else }}
          - name: syncer.podSecurityContext.runAsGroup
            value: "null"
          {{- end }}
          - name: init.manifests
            value: |-
              apiVersion: v1
              kind: Namespace
              metadata:
                name: {{ .Release.Namespace }}
          - name: init.helm[0].chart.name
            value: installer
          - name: init.helm[0].chart.repo
            value: https://charts.krateo.io
          - name: init.helm[0].chart.version
            value: {{ .Chart.Version }}
          - name: init.helm[0].release.name
            value: installer
          - name: init.helm[0].release.namespace
            value: {{ .Release.Namespace }}
          - name: init.helm[0].values
            value: |-
              {{- if eq .Values.env.INSTALLER_DEBUG "true" }}
              env:
                INSTALLER_DEBUG: "true"
              {{- else }}
              env:
                INSTALLER_DEBUG: "false"
              {{- end }}
              krateoplatformops:
                vcluster:
                  enabled: false
                {{- if .Values.krateoplatformops.init.enabled }}
                init:
                  enabled: true
                {{- else }}
                init:
                  enabled: false
                {{- end }}
                {{- if and (eq .Values.krateoplatformops.service.type "NodePort") .Values.krateoplatformops.service.externalIpAvailable }}
                service:
                  type: NodePort
                  externalIpAvailable: true
                {{- else if and (eq .Values.krateoplatformops.service.type "NodePort") (not .Values.krateoplatformops.service.externalIpAvailable) }}
                service:
                  type: NodePort
                  externalIpAvailable: false
                {{- else if and (eq .Values.krateoplatformops.service.type "LoadBalancer") .Values.krateoplatformops.service.externalIpAvailable }}
                service:
                  type: LoadBalancer
                  externalIpAvailable: true
                {{- else if and (eq .Values.krateoplatformops.service.type "LoadBalancer") (not .Values.krateoplatformops.service.externalIpAvailable) }}
                service:
                  type: LoadBalancer
                  externalIpAvailable: false
                {{- else }}
                service:
                  type: ClusterIP
                  externalIpAvailable: false
                {{- end }}
                {{- if .Values.krateoplatformops.ingress.enabled }}
                {{- with .Values.krateoplatformops.ingress }}
                ingress:
                  {{- toYaml . | nindent 18 }}
                {{- end }}
                {{- end }}
                {{- with .Values.krateoplatformops.frontend }}
                frontend:
                  {{- toYaml . | nindent 18 }}
                {{- end }}
                {{- with .Values.krateoplatformops.bff }}
                bff:
                  {{- toYaml . | nindent 18 }}
                {{- end }}
                {{- with .Values.krateoplatformops.backend }}
                backend:
                  {{- toYaml . | nindent 18 }}
                {{- end }}
                {{- if .Values.krateoplatformops.authn }}
                authn:
                  {{- with .Values.krateoplatformops.authn.image }}
                  image:
                    {{- toYaml . | nindent 20 }}
                  {{- end }}
                  {{- if and (eq .Values.krateoplatformops.service.type "NodePort") .Values.krateoplatformops.service.externalIpAvailable }}
                  KUBECONFIG_SERVER_URL: https://$KUBECONFIG_KUBERNETES_IP:$KUBECONFIG_KUBERNETES_PORT
                  {{- else if and (eq .Values.krateoplatformops.service.type "NodePort") (not .Values.krateoplatformops.service.externalIpAvailable) }}
                  KUBECONFIG_SERVER_URL: https://127.0.0.1:$KUBECONFIG_KUBERNETES_PORT
                  {{- else if eq .Values.krateoplatformops.service.type "LoadBalancer" }}
                  KUBECONFIG_SERVER_URL: https://$KUBECONFIG_KUBERNETES_IP:$KUBECONFIG_KUBERNETES_PORT
                  {{- else if and (eq .Values.krateoplatformops.service.type "ClusterIP") ( .Values.krateoplatformops.ingress.enabled) }}
                  KUBECONFIG_SERVER_URL: https://$KUBECONFIG_KUBERNETES_HOSTNAME
                  {{- end }}
                {{- end }}
                {{- with index .Values.krateoplatformops "core-provider" }}
                core-provider:
                  {{- toYaml . | nindent 18 }}
                {{- end }}
                {{- with index .Values.krateoplatformops "patch-provider" }}
                patch-provider:
                  {{- toYaml . | nindent 18 }}
                {{- end }}
                {{- with .Values.krateoplatformops.eventrouter }}
                eventrouter:
                  {{- toYaml . | nindent 18 }}
                {{- end }}
{{- end }}
