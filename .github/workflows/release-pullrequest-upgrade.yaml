name: release-pullrequest-upgrade

on:
  pull_request:
    branches:
      - main

jobs:
  install-kind:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        k8s_version: [ "v1.31.6", "v1.32.3" ]

    steps:
      - name: Extract and Store Trimmed Repository Name
        run: |
          REPO_CHART_NAME="${{ github.repository }}"
          REPO_APP_NAME=$(echo "$REPO_CHART_NAME" | sed 's/-chart$//')  # Remove "-chart" suffix if present
          
          # Check if the trimmed repo exists
          HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/$REPO_APP_NAME")

          if [[ "$HTTP_STATUS" -eq 200 ]]; then
            echo "Using trimmed repository name: $REPO_APP_NAME"
            echo "REPO_APP_NAME=$REPO_APP_NAME" >> $GITHUB_ENV
          else
            echo "Trimmed repository not found. Falling back to original repository name."
            echo "REPO_APP_NAME=$REPO_CHART_NAME" >> $GITHUB_ENV
          fi

      - name: Use the Stored Variable
        run: |
          echo "Trimmed Repository Name: ${{ env.REPO_APP_NAME }}"

      - name: Authenticate with GitHub App
        id: authenticate
        uses: tibdex/github-app-token@v1
        with:
          app_id: ${{ secrets.APP_ID }}
          private_key: ${{ secrets.PRIVATE_KEY }}

      - name: Extract latest App Version
        uses: tdemin/find-latest-tag@v1
        id: app_version
        with:
          repo: https://${{ steps.authenticate.outputs.token }}@github.com/${{ env.REPO_APP_NAME }}.git

      - name: Extract latest Chart Version
        uses: tdemin/find-latest-tag@v1
        id: chart_version
        with:
          repo: https://${{ steps.authenticate.outputs.token }}@github.com/${{ github.repository }}.git

      - name: Checkout
        uses: actions/checkout@v3

      - name: Print Version
        id: bump
        run: |
          echo APP_VERSION:${{steps.app_version.outputs.tag}}
          echo CHART_VERSION:${{steps.chart_version.outputs.tag}}

          IFS='.' read -r major minor patch <<< "${{ steps.chart_version.outputs.tag }}"
          patch=$((patch + 1))
          new_version="${major}.${minor}.${patch}"
          echo "$new_version" > VERSION
          echo "new_version=$new_version" >> $GITHUB_OUTPUT

      - name: Replace Version in Chart.yaml
        run: sed -i 's/CHART_VERSION/${{ steps.bump.outputs.new_version }}/g' ./chart/Chart.yaml

      - name: Print latest App Version
        run: echo ${{ steps.app_version.outputs.tag }}

      - name: Replace App Version in Chart.yaml
        run: sed -i 's/APP_VERSION/${{ steps.app_version.outputs.tag }}/g' ./chart/Chart.yaml

      - name: Set up Helm
        uses: azure/setup-helm@v4.1.0

      - name: Helm lint
        run: helm lint ./chart

      - name: Create k8s Kind Cluster
        uses: helm/kind-action@v1
        with:
          node_image: kindest/node:${{ matrix.k8s_version }}

      - name: Install latest Krateo PlatformOps with standard configuration
        run: |
          helm repo add krateo https://charts.krateo.io
          helm repo update krateo
          helm install installer krateo/installer --create-namespace -n krateo-system --wait

      - name: Wait for krateoplatformops krateo to become ready
        run: kubectl wait krateoplatformops krateo --for condition=Ready=True --timeout=600s --namespace krateo-system

      - name: Get krateo version
        run: helm list --namespace krateo-system --filter '^installer$' --output json | jq -r '.[0].chart' | sed 's/.*-//'

      - name: Get krateoplatformops yaml
        run: kubectl get krateoplatformops krateo --namespace krateo-system -o yaml > krateo-old.yaml

      - name: Upgrade Krateo PlatformOps with standard configuration
        run: helm upgrade installer ./chart -n krateo-system --wait

      - name: Wait for krateoplatformops krateo to become ready
        run: kubectl wait krateoplatformops krateo --for condition=Ready=True --timeout=600s --namespace krateo-system

      - name: Get krateo version
        run: helm list --namespace krateo-system --filter '^installer$' --output json | jq -r '.[0].chart' | sed 's/.*-//'

      - name: Get krateoplatformops yaml
        run: kubectl get krateoplatformops krateo --namespace krateo-system -o yaml > krateo-new.yaml

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: pip install pyyaml deepdiff

      - name: Compare YAML files
        run: |
          python <<EOF
          import yaml
          from deepdiff import DeepDiff

          with open('krateo-old.yaml') as f1, open('krateo-new.yaml') as f2:
              y1 = yaml.safe_load(f1)
              y2 = yaml.safe_load(f2)

          diff = DeepDiff(y1, y2, ignore_order=True)
          if diff:
              print("🔍 Differences found:")
              print(diff.to_json(indent=2))
              exit(1)  # fail job if there are differences
          else:
              print("✅ No differences found.")
          EOF

      - name: Get events
        if: always()
        run: kubectl get events -A --sort-by='.lastTimestamp'