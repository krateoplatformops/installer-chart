name: release-pullrequest-EKS

on:
  pull_request:
    branches:
      - main

jobs:
  install-EKS:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        k8s_version: [ "1.32", "1.31" ]

    steps:
      - name: Extract and Store Trimmed Repository Name
        run: |
          REPO_CHART_NAME="${{ github.repository }}"
          REPO_APP_NAME=$(echo "$REPO_CHART_NAME" | sed 's/-chart$//')  # Remove "-chart" suffix if present
          
          # Check if the trimmed repo exists
          HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/$REPO_APP_NAME")

          if [[ "$HTTP_STATUS" -eq 200 ]]; then
            echo "Using trimmed repository name: $REPO_APP_NAME"
            echo "REPO_APP_NAME=$REPO_APP_NAME" >> $GITHUB_ENV
          else
            echo "Trimmed repository not found. Falling back to original repository name."
            echo "REPO_APP_NAME=$REPO_CHART_NAME" >> $GITHUB_ENV
          fi

      - name: Use the Stored Variable
        run: |
          echo "Trimmed Repository Name: ${{ env.REPO_APP_NAME }}"

      - name: Authenticate with GitHub App
        id: authenticate
        uses: tibdex/github-app-token@v1
        with:
          app_id: ${{ secrets.APP_ID }}
          private_key: ${{ secrets.PRIVATE_KEY }}

      - name: Extract latest App Version
        uses: tdemin/find-latest-tag@v1
        id: app_version
        with:
          repo: https://${{ steps.authenticate.outputs.token }}@github.com/${{ env.REPO_APP_NAME }}.git

      - name: Extract latest Chart Version
        uses: tdemin/find-latest-tag@v1
        id: chart_version
        with:
          repo: https://${{ steps.authenticate.outputs.token }}@github.com/${{ github.repository }}.git

      - name: Checkout
        uses: actions/checkout@v3

      - name: Print latest Chart Version
        run: |
          echo APP_VERSION:${{steps.app_version.outputs.tag}}
          echo CHART_VERSION:${{steps.chart_version.outputs.tag}}

      - name: Replace Chart Version in Chart.yaml
        run: sed -i 's/CHART_VERSION/${{ steps.chart_version.outputs.tag }}/g' ./chart/Chart.yaml

      - name: Replace App Version in Chart.yaml
        run: sed -i 's/APP_VERSION/${{ steps.app_version.outputs.tag }}/g' ./chart/Chart.yaml

      - name: Set up Helm
        uses: azure/setup-helm@v4.1.0

      - name: Helm lint
        run: helm lint ./chart

      - name: Create k8s Kind Cluster
        uses: helm/kind-action@v1

      - name: Install AWS Signing Helper
        run: |
          curl -Lo aws_signing_helper https://rolesanywhere.amazonaws.com/releases/1.4.0/X86_64/Linux/aws_signing_helper
          chmod +x aws_signing_helper

      - name: Write Certificate from Secrets
        run: |
          echo "${{ secrets.AWS_CERTIFICATE }}" | base64 --decode > certificato.txt
          chmod 600 certificato.txt

      - name: Write Private Key from Secrets
        run: |
          echo "${{ secrets.AWS_PRIVATE_KEY }}" | base64 --decode > chiave_privata_decifrata.key
          chmod 600 chiave_privata_decifrata.key

      - name: Get AWS Credentials via IAM Roles Anywhere
        run: |
          echo "Retrieving AWS credentials..."
          CREDS=$(./aws_signing_helper credential-process \
                --certificate ./certificato.txt \
                --private-key ./chiave_privata_decifrata.key \
                --trust-anchor-arn arn:aws:rolesanywhere:eu-central-1:539247454863:trust-anchor/9cb6726b-665b-4fe7-92fd-c7b46e266808 \
                --profile-arn arn:aws:rolesanywhere:eu-central-1:539247454863:profile/d74cc60b-e748-4868-843f-15c30c7ed6d3 \
                --role-arn arn:aws:iam::539247454863:role/github-action \
                --session-duration 14400)

          ACCESS_KEY=$(echo $CREDS | jq -r '.AccessKeyId')
          SECRET_KEY=$(echo $CREDS | jq -r '.SecretAccessKey')
          SESSION_TOKEN=$(echo $CREDS | jq -r '.SessionToken')
          EXPIRATION=$(echo $CREDS | jq -r '.Expiration')

          cat > ./credentials <<EOF
          [profile dev]
          aws_access_key_id = $ACCESS_KEY
          aws_secret_access_key = $SECRET_KEY
          aws_session_token = $SESSION_TOKEN
          EOF

          cat ./credentials

          echo "AWS credentials retrieved. Session expires at: $EXPIRATION"

      - name: Create AWS Credentials Secret in Kubernetes
        run: |
          kubectl create ns ack-system
          kubectl create secret generic aws-creds \
            --from-file=credentials-file=./credentials \
            --namespace=ack-system \
            --type=Opaque

      - name: Clean Up Sensitive Files
        run: rm -f certificato.txt chiave_privata_decifrata.key ./credentials

      - name: Install ACK Controller on Kind using Helm
        run: |
          helm install --create-namespace -n ack-system ack-eks-controller \
          oci://public.ecr.aws/aws-controllers-k8s/eks-chart --version=1.6.3 --set=aws.region=eu-central-1 --wait --set=aws.credentials.secretName=aws-creds --set=aws.credentials.secretKey=credentials-file --set=aws.credentials.profile=dev

      # Prepare a sanitized version string (replace '.' with '-') and store it in K8S_VERSION_NODOT
      - name: Prepare version variable
        run: echo "K8S_VERSION_NODOT=$(echo '${{ matrix.k8s_version }}' | tr '.' '-')" >> $GITHUB_ENV

      - name: Annotate ACK Controller serviceaccount
        run: kubectl annotate serviceaccount -n ack-system ack-eks-controller eks.amazonaws.com/role-arn=arn:aws:iam::539247454863:role/github-action

      - name: Check ACK Controller serviceaccount
        run: kubectl describe serviceaccount -n ack-system ack-eks-controller

      - name: Restart ACK Controller 
        run: kubectl rollout restart deployment -n ack-system ack-eks-controller-eks-chart  

      - name: Get events
        if: always()
        run: kubectl get events -A --sort-by='.lastTimestamp'

      - name: Get pods
        if: always()
        run: kubectl describe pods -n ack-system

      - name: Get logs of ACK Controller pod
        if: always()
        run: |
          POD_NAME=$(kubectl get pods -n ack-system -l app.kubernetes.io/instance=ack-eks-controller -o jsonpath="{.items[0].metadata.name}")
          if [[ -n "$POD_NAME" ]]; then
            kubectl logs -n ack-system "$POD_NAME"
          else
            echo "No pod found with label app.kubernetes.io/instance=ack-eks-controller"
          fi