name: release-pullrequest-AKS

on:
  pull_request:
    branches:
      - main

jobs:
  install-AKS:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        k8s_version: [ "1.31.5", "1.30.9" ]

    steps:
      - name: Extract and Store Trimmed Repository Name
        run: |
          REPO_CHART_NAME="${{ github.repository }}"
          REPO_APP_NAME=$(echo "$REPO_CHART_NAME" | sed 's/-chart$//')  # Remove "-chart" suffix if present
          
          # Check if the trimmed repo exists
          HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/$REPO_APP_NAME")

          if [[ "$HTTP_STATUS" -eq 200 ]]; then
            echo "Using trimmed repository name: $REPO_APP_NAME"
            echo "REPO_APP_NAME=$REPO_APP_NAME" >> $GITHUB_ENV
          else
            echo "Trimmed repository not found. Falling back to original repository name."
            echo "REPO_APP_NAME=$REPO_CHART_NAME" >> $GITHUB_ENV
          fi

      - name: Use the Stored Variable
        run: |
          echo "Trimmed Repository Name: ${{ env.REPO_APP_NAME }}"

      - name: Authenticate with GitHub App
        id: authenticate
        uses: tibdex/github-app-token@v1
        with:
          app_id: ${{ secrets.APP_ID }}
          private_key: ${{ secrets.PRIVATE_KEY }}

      - name: Extract latest App Version
        uses: tdemin/find-latest-tag@v1
        id: app_version
        with:
          repo: https://${{ steps.authenticate.outputs.token }}@github.com/${{ env.REPO_APP_NAME }}.git

      - name: Extract latest Chart Version
        uses: tdemin/find-latest-tag@v1
        id: chart_version
        with:
          repo: https://${{ steps.authenticate.outputs.token }}@github.com/${{ github.repository }}.git

      - name: Checkout
        uses: actions/checkout@v3

      - name: Print Version
        run: |
          echo APP_VERSION:${{steps.app_version.outputs.tag}}
          echo CHART_VERSION:${{steps.chart_version.outputs.tag}}

      - name: Replace Version in Chart.yaml
        run: sed -i 's/CHART_VERSION/${{ steps.chart_version.outputs.tag }}/g' ./chart/Chart.yaml

      - name: Print latest App Version
        run: echo ${{ steps.app_version.outputs.tag }}

      - name: Replace App Version in Chart.yaml
        run: sed -i 's/APP_VERSION/${{ steps.app_version.outputs.tag }}/g' ./chart/Chart.yaml

      - name: Set up Helm
        uses: azure/setup-helm@v4.1.0

      - name: Helm lint
        run: helm lint ./chart

      - name: Create k8s Kind Cluster
        uses: helm/kind-action@v1

      - name: Create Azure Credentials Secret in Kind
        run: |
          echo '${{ secrets.INSTALLER_AZURE_CREDENTIALS }}' > azurecreds.json
          kubectl create secret generic azure-credentials --from-file=azurecreds.json

      - name: Install cert-manager using Helm
        run: |
          helm repo add jetstack https://charts.jetstack.io
          helm repo update
          helm install cert-manager jetstack/cert-manager --namespace cert-manager --set installCRDs=true --wait --create-namespace --version=

      - name: Install Azure Service Operator on Kind using Helm
        run: |
          helm repo add aso2 https://raw.githubusercontent.com/Azure/azure-service-operator/main/v2/charts
          helm repo update
          helm install aso2 aso2/azure-service-operator --create-namespace --wait --version=2.12.0 --namespace=azureserviceoperator-system --set crdPattern='resources.azure.com/*;containerservice.azure.com/*;keyvault.azure.com/*;managedidentity.azure.com/*;eventhub.azure.com/*'

      - name: Deploy ManagedCluster CR via ASO
        run: |
          echo "Deploying ManagedCluster resource with Kubernetes version ${{ matrix.k8s_version }}..."
          cat <<EOF | kubectl apply -f -
          apiVersion: containerservice.azure.com/v1api20240901
          kind: ManagedCluster
          metadata:
            name: managedcluster-${{ replace(matrix.k8s_version, '.', '-') }}
          spec:
            location: "eastus"
            dnsPrefix: "aks-${{ matrix.k8s_version }}"
            kubernetesVersion: "${{ matrix.k8s_version }}"
            agentPoolProfiles:
              - name: agentpool
                count: 1
                vmSize: Standard_DS2_v2
          EOF

      - name: Wait for ManagedCluster Provisioning
        run: |
          echo "Waiting for ManagedCluster resource to become Ready..."
          kubectl wait --for=condition=Ready --timeout=600s managedcluster/managedcluster-${{ matrix.k8s_version }}

      - name: Retrieve ManagedCluster Kubeconfig
        run: |
          echo "Extracting kubeconfig from secret..."
          kubectl get secret managedcluster-${{ matrix.k8s_version }}-kubeconfig -o jsonpath='{.data.kubeconfig}' | base64 -d > aks-kubeconfig.yaml
          echo "KUBECONFIG=$(pwd)/aks-kubeconfig.yaml" >> $GITHUB_ENV


      - name: Install Krateo PlatformOps with standard configuration
        run: helm install installer ./chart --create-namespace -n krateo-system --wait

      - name: Wait for krateoplatformops krateo to become ready
        run: kubectl wait krateoplatformops krateo --for condition=Ready=True --timeout=300s --namespace krateo-system